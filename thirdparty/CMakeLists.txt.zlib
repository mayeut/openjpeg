cmake_minimum_required(VERSION 2.4.4)
set(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS ON)

project(zlib C)

set(VERSION "1.2.8")

include(CheckTypeSize)
include(CheckFunctionExists)
include(CheckIncludeFile)
include(CheckCSourceCompiles)

check_include_file(sys/types.h HAVE_SYS_TYPES_H)
check_include_file(stdint.h    HAVE_STDINT_H)
check_include_file(stddef.h    HAVE_STDDEF_H)

#
# Check to see if we have large file support
#
set(CMAKE_REQUIRED_DEFINITIONS -D_LARGEFILE64_SOURCE=1)
# We add these other definitions here because CheckTypeSize.cmake
# in CMake 2.4.x does not automatically do so and we want
# compatibility with CMake 2.4.x.
if(HAVE_SYS_TYPES_H)
    list(APPEND CMAKE_REQUIRED_DEFINITIONS -DHAVE_SYS_TYPES_H)
endif()
if(HAVE_STDINT_H)
    list(APPEND CMAKE_REQUIRED_DEFINITIONS -DHAVE_STDINT_H)
endif()
if(HAVE_STDDEF_H)
    list(APPEND CMAKE_REQUIRED_DEFINITIONS -DHAVE_STDDEF_H)
endif()
check_type_size(off64_t OFF64_T)
if(HAVE_OFF64_T)
   add_definitions(-D_LARGEFILE64_SOURCE=1)
endif()
set(CMAKE_REQUIRED_DEFINITIONS) # clear variable

#
# Check for fseeko
#
check_function_exists(fseeko HAVE_FSEEKO)
if(NOT HAVE_FSEEKO)
    add_definitions(-DNO_FSEEKO)
endif()

#
# Check for unistd.h
#
check_include_file(unistd.h Z_HAVE_UNISTD_H)

if(MSVC)
    add_definitions(-D_CRT_SECURE_NO_DEPRECATE)
    add_definitions(-D_CRT_NONSTDC_NO_DEPRECATE)
    include_directories(${CMAKE_CURRENT_SOURCE_DIR})
endif()

# The following lines of zlib original CMakeLists.txt modify the submodule git status...
# We will copy source files...
#if(NOT CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_CURRENT_BINARY_DIR)
#    # If we're doing an out of source build and the user has a zconf.h
#    # in their source tree...
#    if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/zlib/zconf.h)
#        message(STATUS "Renaming")
#        message(STATUS "    ${CMAKE_CURRENT_SOURCE_DIR}/zlib/zconf.h")
#        message(STATUS "to 'zconf.h.included' because this file is included with zlib")
#        message(STATUS "but CMake generates it automatically in the build directory.")
#        file(RENAME ${CMAKE_CURRENT_SOURCE_DIR}/zlib/zconf.h ${CMAKE_CURRENT_SOURCE_DIR}/zlib/zconf.h.included)
#  endif()
#endif()

set(ZLIB_PUBLIC_HDRS
    ${CMAKE_CURRENT_BINARY_DIR}/zlib-inc/zconf.h
    ${CMAKE_CURRENT_BINARY_DIR}/zlib-inc/zlib.h
)
set(ZLIB_PRIVATE_HDRS
    crc32.h
    deflate.h
    gzguts.h
    inffast.h
    inffixed.h
    inflate.h
    inftrees.h
    trees.h
    zutil.h
)
set(ZLIB_SRCS
    adler32.c
    compress.c
    crc32.c
    deflate.c
    gzclose.c
    gzlib.c
    gzread.c
    gzwrite.c
    inflate.c
    infback.c
    inftrees.c
    inffast.c
    trees.c
    uncompr.c
    zutil.c
)

foreach(SRCFILE IN LISTS ZLIB_PRIVATE_HDRS ZLIB_SRCS)
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/zlib/${SRCFILE} ${CMAKE_CURRENT_BINARY_DIR}/zlib-src/${SRCFILE} COPYONLY)
  set(ZLIB_SOURCES ${ZLIB_SOURCES} ${CMAKE_CURRENT_BINARY_DIR}/zlib-src/${SRCFILE})
endforeach()

configure_file(	${CMAKE_CURRENT_SOURCE_DIR}/zlib/zconf.h.cmakein
		${CMAKE_CURRENT_BINARY_DIR}/zlib-inc/zconf.h @ONLY)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/zlib/zlib.h
		${CMAKE_CURRENT_BINARY_DIR}/zlib-inc/zlib.h COPYONLY)

#============================================================================
# zlib
#============================================================================

add_library(zlibstatic STATIC ${ZLIB_SOURCES} ${ZLIB_PUBLIC_HDRS})

get_property(ZLIB_TARGET_INC TARGET zlibstatic PROPERTY INCLUDE_DIRECTORIES)
set_property(TARGET zlibstatic PROPERTY INCLUDE_DIRECTORIES ${CMAKE_CURRENT_BINARY_DIR}/zlib-inc;${CMAKE_CURRENT_BINARY_DIR}/zlib-src;${ZLIB_TARGET_INC})
